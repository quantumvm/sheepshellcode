<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Sheep Shellcode]]></title>
  <link href="http://quantumvm.github.io//github/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://quantumvm.github.io//github/"/>
  <updated>2016-04-12T22:13:50-04:00</updated>
  <id>http://quantumvm.github.io//github/</id>
  <author>
    <name><![CDATA[Vincent Moscatello]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nmap on Android]]></title>
    <link href="http://quantumvm.github.io//github/blog/2014/10/11/nmap-on-android/"/>
    <updated>2014-10-11T20:00:56-04:00</updated>
    <id>http://quantumvm.github.io//github/blog/2014/10/11/nmap-on-android</id>
    <content type="html"><![CDATA[<p>This weekend, I got my first smart phone an Android LGLS740. What I love about android is that it is a Linux based operating system at its core. The very first application I went to download on it was Terminal Emulator for Android (<a href="https://play.google.com/store/apps/details?id=jackpal.androidterm&amp;hl=en">https://play.google.com/store/apps/details?id=jackpal.androidterm&amp;hl=en</a>). This effectively makes the phone a low spec computer you can carry in your pocket.</p>

<p>Although most of applications for android are written in java, It seemed logical that an ELF file should still be able to run so long as I compiled it for the right processor. I explored android&rsquo;s settings for cpu info but eventually gave up. I was a bit surprised I wasn&rsquo;t able to find this information under the &ldquo;Hardware information&rdquo; setting. I figured it would be much faster to just cat the cpuinfo file in the file system using the terminal app.</p>

<pre><code class="bash">
cat /proc/cpuinfo
</code></pre>

<p>Looks like its running ARMv7 rev 3.</p>

<p><img class="center" src="/images/android/android-cpuinfo.png" width="719" height="404"></p>

<p>Now that I knew which architecture I needed, I actually had to compile the software. This is where I started to encounter a few issues. Turns out cross compiling is signifigantly more invloved than I anticipated. I was very tempted to simply download and run the binaries found here: <a href="http://ftp.linux.hr/android/nmap/nmap-6.46-android-arm-bin.tar.bz2">http://ftp.linux.hr/android/nmap/nmap-6.46-android-arm-bin.tar.bz2</a></p>

<p>Yet&hellip; this was a community donated program that isn&rsquo;t located in official repositories. The author didn&rsquo;t even provide an md5 hash. This was also for nmap 6.46 instead of 6.47. Furthermore given the &ldquo;.hr&rdquo; domain the binary appeared to be hosted somewhere in croatia? This risk of the program being back doored seemed to be a little out of my comfort zone so I went off and downloaded the nmap sourcecode.</p>

<p>To solve the cross compiling issue I ended up using the android NDK found here: <a href="https://developer.android.com/tools/sdk/ndk/index.html">https://developer.android.com/tools/sdk/ndk/index.html</a></p>

<p>I did a bit more exploring to see if somone had used the NDK to compile nmap before. Turns out they had. <a href="https://github.com/kost/nmap-android/Makefile">https://github.com/kost/nmap-android/Makefile</a> After I read through the Makefile so I had a full understanding of what it was doing, I noticed that there were several issues with it and this was confirmed by other comments on the issues tab. These were issues from 2 years ago which unfortunately were unresolved. Rather than rewriting the make file from scratch I decided to modify the existing make file so it actually worked. You can find it here: <a href="https://github.com/quantumvm/AndroidNmap/blob/master/android/Makefile">https://github.com/quantumvm/AndroidNmap/blob/master/android/Makefile</a></p>

<p>After running the make file as &ldquo;make doit&rdquo; I encountered another issue but this time with the actual NDK itself. Turns out there was an issue caused by bash that was making the script make-standalone-toolchain.sh fail. I located the syntax error at line 723 and changed:</p>

<p><strong>OLD</strong>
<code>bash
for ABI in $(tr ',' ' ' &lt;&lt;&lt; $ABIS); do
</code>
<strong>NEW</strong>
<code>bash
for ABI in $(echo "$ABIS" | tr ',' ' '); do
</code></p>

<p>I then once again ran the make file but this time with the havendk argument:
make havendk</p>

<p>SUCCESS the screen filled with a bunch of ascii art that appears when you compile nmap manually. :&lsquo;)</p>

<p><img class="center" src="/images/android/android-nmap.png" width="719" height="404"></p>

<p>I didn&rsquo;t feel like rooting my phone to get the binary to run. Instead I just copied the binary from my sd card&rsquo;s Download folder into the Terminal apps home directory located at /data/data/jackpal.androidterm Before the binary could actaully be run it was necissary to run chmod on it. Nmap does have a few dependencies which need to be copied onto the sdcard. Based on our makefile they must be located in /sdcard/opt/nmap-6.47 most notable is the nmap-services file. This has to be located at /sdcard/opt/nmap-6.47/share/nmap</p>
]]></content>
  </entry>
  
</feed>
